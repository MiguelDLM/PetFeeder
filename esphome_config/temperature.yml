esphome:
  name: temperature-sensor
  friendly_name: Wheather Station


# Cambiar a ESP8266
esp8266:
  board: nodemcuv2  # Cambiar según tu modelo (nodemcuv2, d1_mini, etc.)
  restore_from_flash: true

# Enable logging with reduced level
logger:
  level: INFO  # Reduced from DEBUG
  baud_rate: 115200
  logs:
    sensor: INFO
    i2c: WARN

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: high
  fast_connect: true
  reboot_timeout: 15min
  
  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "Wheather Station Fallback Hotspot"
    password: "password123"

captive_portal:

# Componentes necesarios para la interfaz web
web_server:
  port: 80
  version: 3
  
# Panel frontal personalizado
text_sensor:
  - platform: template
    name: "Water Level Status"
    id: status_sensor
    icon: "mdi:bowl"
    update_interval: 60s
    lambda: |-
      return {"Ready"};

  - platform: template
    name: "Water Level"
    id: water_level_status
    update_interval: 60s
    lambda: |-
      if (id(water_level).state < 0.5) {
        return {"Empty"};
      } else if (id(water_level).state < 1.0) {
        return {"Low"};
      } else if (id(water_level).state < 2.0) {
        return {"Medium"};
      } else {
        return {"Full"};
      }
    icon: "mdi:water"

# Sensor para medir la última vez que se dispensó comida y datos ambientales
sensor:

  - platform: bmp280_i2c
    temperature:
      name: "Outside Temperature"
      oversampling: 16x
    pressure:
      name: "Outside Pressure"
    address: 0x76
    update_interval: 60s
  

# Add I2C bus configuration
i2c:
  sda: GPIO4
  scl: GPIO5
  scan: true
  id: bus_i2c


globals:
  - id: last_feed_time
    type: unsigned long
    restore_value: false
    initial_value: '0'

